name: Casino CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_casino
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pipenv'
        
    - name: Install pipenv
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
        
    - name: Install dependencies
      run: |
        pipenv install --dev
        
    - name: Run Django tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_casino
        SECRET_KEY: ${{ secrets.SECRET_KEY || 'django-test-secret-key' }}
      run: |
        cd project
        pipenv run python manage.py test app --noinput

    - name: Check code formatting with Black
      run: |
        pipenv install black
        pipenv run black --check project/
        
    - name: Run flake8
      run: |
        pipenv install flake8
        pipenv run flake8 project/
        
    - name: Generate test coverage report
      run: |
        pipenv install coverage
        cd project
        pipenv run coverage run manage.py test app
        pipenv run coverage report
        pipenv run coverage xml
        
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./project/coverage.xml
        fail_ci_if_error: false

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run linting
      run: |
        cd frontend
        npm install eslint --no-save
        npx eslint src/
        
    - name: Run tests with Jest
      run: |
        cd frontend
        npm test -- --coverage
        
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
        
    - name: Build frontend
      run: |
        cd frontend
        npm ci
        npm run build
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pipenv'
        
    - name: Install pipenv and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
        pipenv install
        
    - name: Collect static files
      run: |
        cd project
        pipenv run python manage.py collectstatic --noinput

    - name: Create preview environment
      if: github.event_name == 'pull_request'
      run: |
        echo "Creating preview deployment for PR #${{ github.event.pull_request.number }}"
        # This is where you would deploy to a staging environment
        # Example: Deploy to a preview environment with a unique URL based on PR number 